import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
# Importing Data
from sklearn.datasets import load_boston
boston = load_boston()
boston.data.shape
boston.feature_names
data = pd.DataFrame(boston.data)
data.columns = boston.feature_names
data.head(10)
# Price to the data
boston.target.shape
data['Price'] = boston.target
data.head()
data.describe()
data.info()
# Data Input
x = boston.data
# Data Output
y = boston.target
# splitting data to training and testing dataset
from sklearn.model_selection import train_test_split
xtrain, xtest, ytrain, ytest = train_test_split(x, y, test_size=0.3,
 random_state=0)
print("xtrain shape : ", xtrain.shape)
print("xtest shape : ", xtest.shape)
print("ytrain shape : ", ytrain.shape)
print("ytest shape : ", ytest.shape)
# Linear regression model
from sklearn.linear_model import LinearRegression
regressor = LinearRegression()
regressor.fit(xtrain, ytrain)
# predicting the test set results
y_pred = regressor.predict(xtest)
# Scatter graph to show the prediction
plt.scatter(ytest, y_pred, c = 'green')
plt.xlabel("Price: in $1000's")
plt.ylabel("Predicted value")
plt.title("True value vs predicted value : Linear Regression")
plt.show()
#Lasso Regression
bostona = load_boston()
bostona.keys()
boston_pd = pd.DataFrame(bostona.data)
boston_pd.columns = bostona.feature_names
boston_pd.head()
print(boston_pd.head())
#the output/ MEDV
boston_y = pd.DataFrame(bostona.target, columns = ['MEDV'])
boston_y
print(boston_y.head())
#import seaborn as sns
#g = sns.pairplot(boston_pd)
from sklearn import linear_model
clf = linear_model.Lasso(alpha=0.1)
clf.fit(boston_pd,boston_y)
clf.coef_
print(clf.coef_)
import matplotlib.pyplot as plt
_=plt.plot(range(len(bostona.feature_names)),clf.coef_)
_=plt.xticks(range(len(bostona.feature_names)),bostona.feature_names,rotation=60)
_=plt.ylabel("Coefficients")
plt.show()
#Output
from sklearn.metrics import mean_squared_error, mean_absolute_error
mse = mean_squared_error(ytest, y_pred)
mae = mean_absolute_error(ytest,y_pred)
print("Mean Square Error : ", mse)
print("Mean Absolute Error : ", mae)
